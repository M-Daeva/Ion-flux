/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.25.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Decimal, Cw20ReceiveMsg, QueryMsg, MigrateMsg, Addr, ArrayOfBalance, Balance, Config, ArrayOfTupleOfAddrAndUint128, ArrayOfTupleOfAddrAndDecimal, Timestamp, Uint64, ArrayOfTupleOfAddrAndArrayOfAsset, Asset, ArrayOfTupleOfAddrAndToken, Token, Sample } from "./IonFlux.types";
export interface IonFluxMessage {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    priceAge,
    swapFeeRate,
    unbondingPeriod,
    window
  }: {
    admin?: string;
    priceAge?: Uint128;
    swapFeeRate?: Decimal;
    unbondingPeriod?: Uint128;
    window?: Uint128;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateToken: ({
    priceFeedIdStr,
    symbol,
    tokenAddr
  }: {
    priceFeedIdStr: string;
    symbol: string;
    tokenAddr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unbond: ({
    amount,
    tokenAddr
  }: {
    amount: Uint128;
    tokenAddr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: ({
    amount,
    tokenAddr
  }: {
    amount: Uint128;
    tokenAddr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claim: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  swapAndClaim: ({
    tokenOutAddr
  }: {
    tokenOutAddr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class IonFluxMessageComposer implements IonFluxMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateToken = this.updateToken.bind(this);
    this.unbond = this.unbond.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.claim = this.claim.bind(this);
    this.swapAndClaim = this.swapAndClaim.bind(this);
  }

  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds
      })
    };
  };
  updateConfig = ({
    admin,
    priceAge,
    swapFeeRate,
    unbondingPeriod,
    window
  }: {
    admin?: string;
    priceAge?: Uint128;
    swapFeeRate?: Decimal;
    unbondingPeriod?: Uint128;
    window?: Uint128;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            price_age: priceAge,
            swap_fee_rate: swapFeeRate,
            unbonding_period: unbondingPeriod,
            window
          }
        })),
        funds
      })
    };
  };
  updateToken = ({
    priceFeedIdStr,
    symbol,
    tokenAddr
  }: {
    priceFeedIdStr: string;
    symbol: string;
    tokenAddr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_token: {
            price_feed_id_str: priceFeedIdStr,
            symbol,
            token_addr: tokenAddr
          }
        })),
        funds
      })
    };
  };
  unbond = ({
    amount,
    tokenAddr
  }: {
    amount: Uint128;
    tokenAddr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unbond: {
            amount,
            token_addr: tokenAddr
          }
        })),
        funds
      })
    };
  };
  withdraw = ({
    amount,
    tokenAddr
  }: {
    amount: Uint128;
    tokenAddr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {
            amount,
            token_addr: tokenAddr
          }
        })),
        funds
      })
    };
  };
  claim = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim: {}
        })),
        funds
      })
    };
  };
  swapAndClaim = ({
    tokenOutAddr
  }: {
    tokenOutAddr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          swap_and_claim: {
            token_out_addr: tokenOutAddr
          }
        })),
        funds
      })
    };
  };
}